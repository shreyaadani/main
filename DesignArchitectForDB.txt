Architecture Design
BufferManager Class
The BufferManager is the core of the system. It will interact with the following components:
	•	Page Table (Hash Map): Maps the Page ID to Frame Locations in memory. This allows fast access to pages that are already loaded into memory.
	•	LRU List/Queue: Tracks the access order of pages in memory for eviction purposes. It will store the most recently used pages and evict the least recently used ones when needed.
	•	Eviction Policy (LRU): Determines which page to evict when the buffer is full. It will work with the LRU List to identify which page to evict based on access history.
Responsibilities of the BufferManager:
	•	Load Page: Check if the requested page is in memory; if not, load it from disk. If the memory is full, evict a page based on the eviction policy.
	•	Pin/Unpin Page: Pages can be pinned to prevent eviction. When the caller is done with the page, it will be unpinned.
	•	Evict Page: If the buffer is full, choose a page to evict based on the eviction policy (LRU) and write any modified pages back to disk before eviction.
	•	Track Dirty Pages: Pages that have been modified in memory must be marked as "dirty." These pages need to be written back to disk when they are evicted.
2.2. Page Class
The Page class represents an individual page in memory. It is responsible for managing the data within the page and performing operations related to serialization and insertion.
Responsibilities of the Page Class:
	•	Insert Row: Insert new rows into the page. If the page is full, it should be marked for evicting or a new page should be created.
	•	Serialize/Deserialize: Read/write data to/from the disk file. The page is saved as a 4 KB chunk of binary data.
	•	Check Full: Determine if the page is full and cannot accept more rows.
	•	Mark Dirty: When a page is modified, it should be marked as "dirty," signaling that it must be written back to disk when evicted.
2.3. Eviction Policy (LRU) - using priories queue, doubly linked list
The eviction policy is responsible for deciding which pages to evict when the buffer is full. The Least Recently Used (LRU) policy is a simple and effective approach for this.
Responsibilities of the LRU Eviction Policy:
	•	Track Access: Maintain a list of pages ordered by access time, with the most recently used pages at the front and the least recently used at the back.
	•	Evict: When memory is full, evict the page at the back of the list (the least recently used page). Before eviction, if the page is dirty, it should be written back to disk.
2.4. Page Table (Hash Map)
The page table is a hash map that stores a mapping between Page IDs and frame locations in memory. This allows for quick lookup when a page is requested.
Responsibilities of the Page Table:
	•	Lookup: When a page is requested, check the page table to see if the page is already loaded into memory.
	•	Add/Remove Entries: When a page is loaded, it is added to the page table with a reference to its frame in memory. When it is evicted, it is removed from the table.
2.5. Disk/Flat File
This is where pages are stored when not in memory. The system treats the flat file as a simplified version of a database or heap file.
Responsibilities of the Disk File:
	•	Read/Write Pages: The disk file stores pages in a serialized format. Pages are read from and written to disk when they are loaded into or evicted from memory.

4. Diagram of the System
pgsql
Copy
+--------------------+     +--------------------+     +--------------------+
|    Caller (User)   |<--->|   BufferManager    |<--->|    Disk/Flat File  |
+--------------------+     +--------------------+     +--------------------+
       |                          |                          |
       |                          |                          |
       v                          v                          v
   Request Page            Page Table               Pages (4KB) Stored on Disk
      (Fetch)            (Maps Page ID to Frame)
   Pin/Unpin Page       Eviction (LRU)             Write/Read Pages from Disk
   Insert Row           Dirty Page Tracking
      (Modify)

5. Additional Considerations
	•	Concurrency: The system currently assumes a single caller thread.
	•	Error Handling: We need to handle errors such as disk failures, memory allocation issues, and invalid access requests.
	•	Performance: Optimizations could be made in terms of eviction strategies or disk access to handle large datasets more efficiently.

